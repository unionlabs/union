use std::error::Error;

use alloy_sol_types::{SolValue, abi::TokenSeq};
use ucs03_zkgm::com::{TAG_ACK_FAILURE, TAG_ACK_SUCCESS};
use unionlabs_primitives::{Bytes, H256, U256};

pub use crate::{
    batch::{Batch, BatchAck, BatchShape},
    call::{Call, CallAck, CallShape},
    forward::{Forward, ForwardAck, ForwardShape},
    root::{Root, RootAck, RootShape},
    token_order::{TokenOrder, TokenOrderAck, TokenOrderShape},
};

pub mod batch;
pub mod call;
pub mod forward;
pub mod root;
pub mod token_order;

pub type Result<T> = std::result::Result<T, Box<dyn Error + Send + Sync + 'static>>;

#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(deny_unknown_fields, rename_all = "snake_case")
)]
pub struct ZkgmPacket {
    pub salt: H256,
    pub path: U256,
    pub instruction: Root,
}

impl ZkgmPacket {
    pub fn decode(bz: impl AsRef<[u8]>) -> Result<Self> {
        let ucs03_zkgm::com::ZkgmPacket {
            salt,
            path,
            instruction,
        } = ucs03_zkgm::com::ZkgmPacket::abi_decode_params_validate(bz.as_ref())?;

        Ok(Self {
            salt: salt.into(),
            path: path.into(),
            instruction: Root::from_raw(instruction)?,
        })
    }

    pub fn encode(self) -> Bytes {
        ucs03_zkgm::com::ZkgmPacket::abi_encode_params(&ucs03_zkgm::com::ZkgmPacket {
            salt: self.salt.into(),
            path: self.path.into(),
            instruction: self.instruction.into_instruction().into_raw(),
        })
        .into()
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(deny_unknown_fields, rename_all = "snake_case")
)]
pub enum Ack {
    Success(RootAck),
    Failure(Bytes),
}

impl Ack {
    pub fn decode(shape: RootShape, bz: impl AsRef<[u8]>) -> Result<Self> {
        let ucs03_zkgm::com::Ack { tag, inner_ack } =
            ucs03_zkgm::com::Ack::abi_decode_params_validate(bz.as_ref())?;

        match tag {
            TAG_ACK_SUCCESS => RootAck::decode(shape, &inner_ack).map(Ack::Success),
            TAG_ACK_FAILURE => Ok(Ack::Failure(inner_ack.into())),
            invalid => Err(format!("invalid ack tag {invalid}"))?,
        }
    }

    pub fn encode(&self) -> Bytes {
        match self {
            Ack::Success(inner_ack) => ucs03_zkgm::com::Ack {
                tag: TAG_ACK_SUCCESS,
                inner_ack: inner_ack.encode().into(),
            }
            .abi_encode_params()
            .into(),
            Ack::Failure(inner_ack) => ucs03_zkgm::com::Ack {
                tag: TAG_ACK_FAILURE,
                inner_ack: inner_ack.clone().into(),
            }
            .abi_encode_params()
            .into(),
        }
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize, serde::Deserialize),
    serde(deny_unknown_fields, rename_all = "snake_case")
)]
pub struct Instruction {
    opcode: u8,
    version: u8,
    operand: Bytes,
}

impl Instruction {
    pub(crate) fn new<
        S: for<'a> SolValue<SolType: alloy_sol_types::SolType<Token<'a>: TokenSeq<'a>>>,
    >(
        opcode: u8,
        version: u8,
        operand: S,
    ) -> Self {
        Self {
            opcode,
            version,
            operand: S::abi_encode_params(&operand).into(),
        }
    }

    pub(crate) fn into_raw(self) -> ucs03_zkgm::com::Instruction {
        ucs03_zkgm::com::Instruction {
            version: self.version,
            opcode: self.opcode,
            operand: self.operand.into(),
        }
    }
}

#[cfg(test)]
mod tests {
    use hex_literal::hex;

    use super::*;
    use crate::{
        batch::{
            BatchInstructionV0, BatchInstructionV0Ack, BatchInstructionV0Shape, BatchV0,
            BatchV0Ack, BatchV0Shape,
        },
        call::{CallShape, CallV0, CallV0Ack, CallV0Shape},
        token_order::{TokenOrderShape, TokenOrderV1, TokenOrderV1Ack},
    };

    #[test]
    fn decode() {
        let packet = hex!(
            "79176e1d5f2779e14b2f5f885bfe7b35e78802643522ce0dad5cac4e4a44271f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000001415ee7c367f4232241028c36e720803100757c6e9000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e62626e316d377a72356a77346b397a32327239616a676766347563616c7779377578767539676b7736746e736d7634326c766a706b7761736167656b356700000000000000000000000000000000000000000000000000000000000000000014e53dcec07d16d88e386ae0710e86d9a400f83c31000000000000000000000000000000000000000000000000000000000000000000000000000000000000000442414259000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007426162796c6f6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000047562626ec00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000001415ee7c367f4232241028c36e720803100757c6e9000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e62626e316d377a72356a77346b397a32327239616a676766347563616c7779377578767539676b7736746e736d7634326c766a706b7761736167656b3567000000000000000000000000000000000000000000000000000000000000000000b27b22626f6e64223a7b22616d6f756e74223a223130303030222c2273616c74223a22307833313333303831396135613232336439376163373134663239616535653361646265396565663833383233373830663761393063636536363461626138366565222c226578706563746564223a2239373237222c22726563697069656e74223a2262626e3168637533306461647770686638397533783375366a327a35387233376339616b687866637330227d7d0000000000000000000000000000"
        );

        let ack = hex!(
            "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000b0cad00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001"
        );

        let expected_packet = ZkgmPacket {
            salt: hex!(
                "79176e1d5f2779e14b2f5f885bfe7b35e78802643522ce0dad5cac4e4a44271f"
            ).into(),
            path: U256::ZERO,
            instruction: Root::Batch(Batch::V0(BatchV0 {
                instructions: vec![
                    BatchInstructionV0::TokenOrder(TokenOrder::V1(TokenOrderV1 {
                        sender: hex!("15ee7c367f4232241028c36e720803100757c6e9").into(),
                        receiver: b"bbn1m7zr5jw4k9z22r9ajggf4ucalwy7uxvu9gkw6tnsmv42lvjpkwasagek5g"
                            .into(),
                        base_token: hex!("e53dcec07d16d88e386ae0710e86d9a400f83c31").into(),
                        base_amount: U256::from(10000_u64),
                        base_token_symbol: "BABY".to_owned(),
                        base_token_name: "Babylon".to_owned(),
                        base_token_decimals: 6,
                        base_token_path: U256::from(1_u64),
                        quote_token: b"ubbn".into(),
                        quote_amount: U256::from(10000_u64),
                    })),
                    BatchInstructionV0::Call(Call::V0(CallV0 {
                        sender: hex!("15ee7c367f4232241028c36e720803100757c6e9").into(),
                        eureka: false,
                        contract_address:
                            b"bbn1m7zr5jw4k9z22r9ajggf4ucalwy7uxvu9gkw6tnsmv42lvjpkwasagek5g".into(),
                        contract_calldata: br#"{"bond":{"amount":"10000","salt":"0x31330819a5a223d97ac714f29ae5e3adbe9eef83823780f7a90cce664aba86ee","expected":"9727","recipient":"bbn1hcu30dadwphf89u3x3u6j2z58r37c9akhxfcs0"}}"#.into()
                    })),
                ],
            })),
        };

        let decoded_packet = ZkgmPacket::decode(packet).unwrap();

        assert_eq!(decoded_packet, expected_packet);

        assert_eq!(<Bytes>::from(packet), decoded_packet.clone().encode());

        let expected_shape = RootShape::Batch(batch::BatchShape::V0(BatchV0Shape {
            instructions: vec![
                BatchInstructionV0Shape::TokenOrder(TokenOrderShape::V1),
                BatchInstructionV0Shape::Call(CallShape::V0(CallV0Shape { eureka: false })),
            ],
        }));

        let shape = decoded_packet.instruction.shape();

        assert_eq!(shape, expected_shape);

        let ack = Ack::decode(decoded_packet.instruction.shape(), ack).unwrap();

        let expected_ack = Ack::Success(RootAck::Batch(BatchAck::V0(BatchV0Ack {
            acknowledgements: vec![
                BatchInstructionV0Ack::TokenOrder(TokenOrderAck::V1(TokenOrderV1Ack::Protocol)),
                BatchInstructionV0Ack::Call(CallAck::V0(CallV0Ack::NonEureka)),
            ],
        })));

        assert_eq!(ack, expected_ack);
    }

    #[test]
    fn decode2() {
        let packet = hex!(
            ""
        );

        let ack = hex!(
            "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000"
        );

        let decoded_packet = ZkgmPacket::decode(packet).unwrap();

        dbg!(&decoded_packet);

        let shape = decoded_packet.instruction.shape();

        dbg!(&shape);

        let ack = Ack::decode(decoded_packet.instruction.shape(), ack).unwrap();

        dbg!(&ack);

        println!("{}", serde_json::to_string_pretty(&decoded_packet).unwrap());
        println!("{}", serde_json::to_string_pretty(&shape).unwrap());
        println!("{}", serde_json::to_string_pretty(&ack).unwrap());
    }
}
