"""Cache directive for queries"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

enum ComparisonOp {
  """Less than: `a < b`"""
  lt

  """Greater than: `a > b`"""
  gt
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339")

input Int_comparison_exp {
  _eq: Int!
}

"""A scalar that can represent any JSON value."""
scalar JSON

type LatencyPercentiles {
  p5: Float!
  median: Float!
  p95: Float!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar NaiveDate

enum OrderBy {
  asc
  asc_nulls_first
  asc_nulls_last
  desc
  desc_nulls_first
  desc_nulls_last
}

type Query {
  v2_bonds(args: v2_bonds_args! = {p_addresses_canonical: null, p_block_hash: null, p_comparison: lt, p_destination_universal_chain_id: null, p_limit: null, p_network: null, p_packet_hash: null, p_sort_order: null, p_source_universal_chain_id: null, p_transaction_hash: null}): [v2_bond_type!]!
  v2_chains(args: v2_chains_args! = {p_comparison: lt, p_limit: null, p_sort_order: null, p_universal_chain_id: null}): [v2_chain_type!]!
  v2_channels(args: v2_channels_args! = {p_comparison: lt, p_destination_channel_id: null, p_destination_client_id: null, p_destination_connection_id: null, p_destination_port_id: null, p_destination_universal_chain_id: null, p_limit: null, p_recommended: null, p_sort_order: null, p_source_channel_id: null, p_source_client_id: null, p_source_connection_id: null, p_source_port_id: null, p_source_universal_chain_id: null, p_tags: null, p_version: null}): [v2_channel_type!]!
  v2_clients(args: v2_clients_args! = {p_client_id: null, p_comparison: lt, p_counterparty_universal_chain_id: null, p_limit: null, p_sort_order: null, p_universal_chain_id: null}): [v2_client_type!]!
  v2_connections(args: v2_connections_args! = {p_comparison: lt, p_destination_client_id: null, p_destination_connection_id: null, p_destination_universal_chain_id: null, p_limit: null, p_sort_order: null, p_source_client_id: null, p_source_connection_id: null, p_source_universal_chain_id: null}): [v2_connection_type!]!
  v2_errors: [v2_error_type!]!
  v2_health_check: [v2_health_check_type!]!
  v2_instructions(args: v2_instructions_args! = {p_block_hash: null, p_comparison: lt, p_limit: null, p_multiplex_contract_address: null, p_multiplex_sender: null, p_network: null, p_packet_hash: null, p_sort_order: null, p_transaction_hash: null}): [v2_instruction_type!]!
  v2_packets(args: v2_packets_args! = {p_block_hash: null, p_comparison: lt, p_destination_universal_chain_id: null, p_exceeding_sla: null, p_limit: null, p_network: null, p_packet_hash: null, p_packet_send_timestamp: null, p_sort_order: null, p_source_universal_chain_id: null, p_transaction_hash: null}): [v2_packet_type!]!
  v2_transfers(args: v2_transfers_args! = {p_addresses_canonical: null, p_block_hash: null, p_comparison: lt, p_destination_universal_chain_id: null, p_limit: null, p_network: null, p_packet_hash: null, p_sort_order: null, p_source_universal_chain_id: null, p_transaction_hash: null, p_transfer_index: null}): [v2_transfer_type!]!
  v2_tokens(args: v2_tokens_args! = {p_denom: null, p_universal_chain_id: null, p_whitelist: null}, order_by: v2_token_meta_order_by = null): [v2_token_meta!]!
  v2_unbonds(args: v2_unbonds_args! = {p_addresses_canonical: null, p_block_hash: null, p_comparison: lt, p_destination_universal_chain_id: null, p_limit: null, p_network: null, p_packet_hash: null, p_sort_order: null, p_source_universal_chain_id: null, p_transaction_hash: null}): [v2_unbond_type!]!
  v2_util_get_transfer_request_details(args: v2_util_get_transfer_request_details_args! = {p_source_universal_chain_id: null, p_destination_universal_chain_id: null, p_base_token: null}): [v2_util_get_transfer_request_details_type!]!
  v2_util_get_address_types_for_display_address(args: v2_util_get_address_types_for_display_address_args! = {p_display_address: null, p_chain_type: null}): [v2_util_get_address_types_for_display_address_type!]!
  v2_stats_count: [v2_stats_type!]!
  v2_stats_latency(args: v2_stats_latency_args! = {p_destination_universal_chain_id: null, p_phase: null, p_source_universal_chain_id: null}): [v2_stats_latency_type!]!
  v2_stats_packets_chain(args: v2_stats_packets_chain_args! = {p_days_back: null, p_destination_universal_chain_id: null, p_source_universal_chain_id: null}): [v2_stats_packets_chain_type!]!
  v2_stats_packets_daily_count(args: v2_stats_packets_daily_count_args! = {p_days_back: null}): [v2_stats_daily_count_type!]!
  v2_stats_transfers_chain(args: v2_stats_transfers_chain_args! = {p_days_back: null, p_destination_universal_chain_id: null, p_source_universal_chain_id: null}): [v2_stats_transfers_chain_type!]!
  v2_stats_transfers_daily_count(args: v2_stats_transfers_daily_count_args! = {p_days_back: null}): [v2_stats_daily_count_type!]!
  dashboard_balance_current(args: dashboard_balance_current_args! = {p_contract_address_canonical: null, p_phase: null, p_universal_chain_id: null, p_wallet_addresses_canonical: null}): [dashboard_balance_current_type!]!
  dashboard_transfer_count_by_chain(args: dashboard_count_by_chain_args! = {p_addresses_dashboard: null, p_phase: null}, order_by: dashboard_count_by_chain_type_order_by = null): [dashboard_count_by_chain_type!]!
  dashboard_transfer_days_count_by_chain(args: dashboard_days_by_chain_args! = {p_addresses_dashboard: null}, order_by: dashboard_days_by_chain_type_order_by = null): [dashboard_days_by_chain_type!]!
}

input String_comparison_exp {
  _eq: String
}

input dashboard_balance_current_args {
  p_contract_address_canonical: String
  p_phase: String
  p_universal_chain_id: String
  p_wallet_addresses_canonical: jsonb
}

type dashboard_balance_current_type {
  universal_chain_id: String
  contract_address_canonical: String
  wallet_address_canonical: String
  balance: String
  weighted_balance: String
  token: String
  balance_usd: String
  weighted_balance_usd: String
}

input dashboard_count_by_chain_args {
  p_addresses_dashboard: jsonb
  p_phase: String
}

type dashboard_count_by_chain_type {
  universal_chain_id: String
  phase: String
  count: String
}

input dashboard_count_by_chain_type_order_by {
  phase: OrderBy = null
  universal_chain_id: OrderBy = null
}

input dashboard_days_by_chain_args {
  p_addresses_dashboard: jsonb
}

type dashboard_days_by_chain_type {
  universal_chain_id: String
  day_count: String
}

input dashboard_days_by_chain_type_order_by {
  universal_chain_id: OrderBy = null
}

"""Scalar implementation for GraphQL"""
scalar jsonb

type v2_bond_type {
  packet_hash: String
  bond_success: Boolean
  delivery_success: Boolean
  packet_shape: String
  source_universal_chain_id: String
  remote_universal_chain_id: String
  destination_universal_chain_id: String
  sender_canonical: String
  sender_display: String
  sender_zkgm: String
  receiver_canonical: String
  receiver_display: String
  receiver_zkgm: String
  base_token: String
  base_amount: String
  quote_token: String
  quote_amount: String
  remote_base_token: String
  remote_base_amount: String
  remote_quote_token: String
  remote_quote_amount: String
  bond_send_timestamp: DateTime
  bond_send_transaction_hash: String
  bond_recv_timestamp: DateTime
  bond_recv_transaction_hash: String
  bond_timeout_timestamp: DateTime
  bond_timeout_transaction_hash: String
  delivery_packet_hash: String
  delivery_send_timestamp: DateTime
  delivery_send_transaction_hash: String
  delivery_recv_timestamp: DateTime
  delivery_recv_transaction_hash: String
  delivery_timeout_timestamp: DateTime
  delivery_timeout_transaction_hash: String
  sort_order: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
  bond_traces: [v2_traces_type!]!
  delivery_traces: [v2_traces_type!]!
  base_token_meta: v2_token_meta
  quote_token_meta: v2_token_meta
  remote_base_token_meta: v2_token_meta
  remote_quote_token_meta: v2_token_meta
}

input v2_bonds_args {
  p_addresses_canonical: jsonb
  p_block_hash: String
  p_comparison: ComparisonOp! = lt
  p_destination_universal_chain_id: String
  p_limit: Int
  p_network: String
  p_packet_hash: String
  p_sort_order: String
  p_source_universal_chain_id: String
  p_transaction_hash: String
}

type v2_chain_edition {
  name: String
  environment: String
}

type v2_chain_features {
  environment: String
  packet_list: Boolean
  transfer_list: Boolean
  connection_list: Boolean
  channel_list: Boolean
  index_status: Boolean
  transfer_submission: Boolean
}

input v2_chain_features_bool_exp {
  environment: String_comparison_exp = null
}

type v2_chain_status_type {
  height: String
  timestamp: DateTime
  tip_age_seconds: Int
  status: String
}

type v2_chain_type {
  chain_id: String
  display_name: String
  testnet: Boolean
  rpc_type: String
  addr_prefix: String
  logo_uri: String
  universal_chain_id: String
  minter_address_display: String
  status: v2_chain_status_type!
  editions: [v2_chain_edition!]!
  explorers: [v2_explorers!]!
  features(where: v2_chain_features_bool_exp! = {environment: null}): [v2_chain_features!]!
  rpcs: [v2_rpcs!]!
}

input v2_chains_args {
  p_comparison: ComparisonOp! = lt
  p_limit: Int
  p_sort_order: String
  p_universal_chain_id: String
}

type v2_channel_fee {
  action: String
  fee: String
}

type v2_channel_type {
  source_universal_chain_id: String
  source_client_id: Int
  source_connection_id: Int
  source_channel_id: Int
  source_port_id: String
  destination_universal_chain_id: String
  destination_client_id: Int
  destination_connection_id: Int
  destination_channel_id: Int
  destination_port_id: String
  version: String
  sort_order: String
  tags: [String!]
  sla: String
  fees: [v2_channel_fee!]!
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
}

input v2_channels_args {
  p_comparison: ComparisonOp! = lt
  p_destination_channel_id: Int
  p_destination_client_id: Int
  p_destination_connection_id: Int
  p_destination_port_id: String
  p_destination_universal_chain_id: String
  p_limit: Int
  p_recommended: Boolean
  p_sort_order: String
  p_source_channel_id: Int
  p_source_client_id: Int
  p_source_connection_id: Int
  p_source_port_id: String
  p_source_universal_chain_id: String
  p_tags: jsonb
  p_version: String
}

type v2_client_status_type {
  block_hash: String
  height: String
  timestamp: DateTime
  transaction_hash: String
  counterparty_height: String
}

type v2_client_type {
  client_id: Int
  counterparty_universal_chain_id: String
  sort_order: String
  universal_chain_id: String
  status: v2_client_status_type
  chain: v2_chain_type!
  counterparty_chain: v2_chain_type!
}

input v2_clients_args {
  p_client_id: Int
  p_comparison: ComparisonOp! = lt
  p_counterparty_universal_chain_id: String
  p_limit: Int
  p_sort_order: String
  p_universal_chain_id: String
}

type v2_connection_type {
  source_universal_chain_id: String
  source_client_id: Int
  source_connection_id: Int
  destination_universal_chain_id: String
  destination_client_id: Int
  destination_connection_id: Int
  sort_order: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
}

input v2_connections_args {
  p_comparison: ComparisonOp! = lt
  p_destination_client_id: Int
  p_destination_connection_id: Int
  p_destination_universal_chain_id: String
  p_limit: Int
  p_sort_order: String
  p_source_client_id: Int
  p_source_connection_id: Int
  p_source_universal_chain_id: String
}

type v2_error_type {
  union_error_code: String
  message: String
  detail: String
  hint: String
}

type v2_explorers {
  name: String
  display_name: String
  description: String
  block_url: String
  tx_url: String
  address_url: String
  home_url: String
  logo_uri: String
}

type v2_health_check_type {
  status: String
  last_update: DateTime
  environment: String
}

type v2_instruction_type {
  packet_hash: String
  data: String
  acknowledgement: String
  decoded: JSON
  decoded_flattened: JSON
  timeout_height: String
  timeout_timestamp: String
  channel_version: String
  internal_source_chain_id: Int
  source_universal_chain_id: String
  source_client_id: Int
  source_connection_id: Int
  source_channel_id: Int
  source_port_id: String
  internal_destination_chain_id: Int
  destination_universal_chain_id: String
  destination_client_id: Int
  destination_chain_id: String
  destination_connection_id: Int
  destination_channel_id: Int
  destination_port_id: String
  packet_send_block_hash: String
  packet_send_height: String
  packet_send_timestamp: DateTime
  packet_send_transaction_hash: String
  packet_recv_block_hash: String
  packet_recv_height: String
  packet_recv_timestamp: DateTime
  packet_recv_transaction_hash: String
  packet_recv_maker: String
  packet_recv_maker_msg: String
  write_ack_block_hash: String
  write_ack_height: String
  write_ack_timestamp: DateTime
  write_ack_transaction_hash: String
  packet_ack_block_hash: String
  packet_ack_height: String
  packet_ack_timestamp: DateTime
  packet_ack_transaction_hash: String
  packet_ack_maker: String
  packet_timeout_block_hash: String
  packet_timeout_height: String
  packet_timeout_timestamp: DateTime
  packet_timeout_transaction_hash: String
  packet_timeout_maker: String
  sort_order: String
  status: String
  success: Boolean
  structure: String
  instruction: JSON
  instruction_hash: String
  path: String
  salt: String
  instruction_path: String
  version: Int
  opcode: Int
  operand: JSON
  instruction_type: String
  instruction_index: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
}

input v2_instructions_args {
  p_block_hash: String
  p_comparison: ComparisonOp! = lt
  p_limit: Int
  p_multiplex_contract_address: String
  p_multiplex_sender: String
  p_network: String
  p_packet_hash: String
  p_sort_order: String
  p_transaction_hash: String
}

type v2_packet_type {
  packet_hash: String
  data: String
  acknowledgement: String
  decoded: JSON
  decoded_flattened: JSON
  timeout_height: String
  timeout_timestamp: String
  channel_version: String
  internal_source_chain_id: Int
  source_universal_chain_id: String
  source_client_id: Int
  source_connection_id: Int
  source_channel_id: Int
  source_port_id: String
  internal_destination_chain_id: Int
  destination_universal_chain_id: String
  destination_client_id: Int
  destination_chain_id: String
  destination_connection_id: Int
  destination_channel_id: Int
  destination_port_id: String
  packet_send_block_hash: String
  packet_send_height: String
  packet_send_timestamp: DateTime
  packet_send_transaction_hash: String
  packet_recv_block_hash: String
  packet_recv_height: String
  packet_recv_timestamp: DateTime
  packet_recv_transaction_hash: String
  packet_recv_maker: String
  packet_recv_maker_msg: String
  write_ack_block_hash: String
  write_ack_height: String
  write_ack_timestamp: DateTime
  write_ack_transaction_hash: String
  packet_ack_block_hash: String
  packet_ack_height: String
  packet_ack_timestamp: DateTime
  packet_ack_transaction_hash: String
  packet_ack_maker: String
  packet_timeout_block_hash: String
  packet_timeout_height: String
  packet_timeout_timestamp: DateTime
  packet_timeout_transaction_hash: String
  packet_timeout_maker: String
  sort_order: String
  status: String
  success: Boolean
  structure: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
  traces: [v2_traces_type!]!
}

input v2_packets_args {
  p_block_hash: String
  p_comparison: ComparisonOp! = lt
  p_destination_universal_chain_id: String
  p_exceeding_sla: String
  p_limit: Int
  p_network: String
  p_packet_hash: String
  p_packet_send_timestamp: DateTime
  p_sort_order: String
  p_source_universal_chain_id: String
  p_transaction_hash: String
}

type v2_rpcs {
  url: String
  description: String
  contact: String
  type: String
}

type v2_stats_daily_count_type {
  day_date: NaiveDate
  count: String
}

input v2_stats_latency_args {
  p_destination_universal_chain_id: String
  p_phase: String
  p_source_universal_chain_id: String
}

type v2_stats_latency_type {
  secs_until_packet_recv: LatencyPercentiles
  secs_until_write_ack: LatencyPercentiles
  secs_until_packet_ack: LatencyPercentiles
}

input v2_stats_packets_chain_args {
  p_days_back: Int
  p_destination_universal_chain_id: String
  p_source_universal_chain_id: String
}

type v2_stats_packets_chain_type {
  day_date: NaiveDate
  source_universal_chain_id: String
  destination_universal_chain_id: String
  total_packets: String
}

input v2_stats_packets_daily_count_args {
  p_days_back: Int
}

input v2_stats_transfers_chain_args {
  p_days_back: Int
  p_destination_universal_chain_id: String
  p_source_universal_chain_id: String
}

type v2_stats_transfers_chain_type {
  day_date: NaiveDate
  source_universal_chain_id: String
  destination_universal_chain_id: String
  total_transfers: String
}

input v2_stats_transfers_daily_count_args {
  p_days_back: Int
}

type v2_stats_type {
  name: String
  value: String
}

type v2_token_meta {
  denom: String
  rank: Int
  universal_chain_id: String
  chain: v2_chain_type!
  bucket: v2_token_meta_bucket
  representations: [v2_token_meta_representations!]!
  wrapping(where: v2_token_meta_wrapping_bool_exp! = {destination_channel_id: null}): [v2_token_meta_wrapping!]!
}

type v2_token_meta_bucket {
  denom: String
  capacity: String
  refill_rate: String
  chain: v2_chain_type!
}

input v2_token_meta_order_by {
  rank: OrderBy = null
}

type v2_token_meta_representation_sources {
  denom: String
  symbol: String
  name: String
  decimals: Int
  update_timestamp: DateTime
  chain: v2_chain_type!
  source: v2_token_meta_sources!
}

type v2_token_meta_representations {
  denom: String
  symbol: String
  name: String
  decimals: Int
  logo_uri: String
  sources: [v2_token_meta_representation_sources!]!
  chain: v2_chain_type!
}

type v2_token_meta_sources {
  source_uri: String
  name: String
  logo_uri: String
}

type v2_token_meta_wrapping {
  wrapped_denom: String
  index: Int
  unwrapped_denom: String
  destination_channel_id: Int
  wrapper: String
  wrapped_chain: v2_chain_type!
  unwrapped_chain: v2_chain_type!
}

input v2_token_meta_wrapping_bool_exp {
  destination_channel_id: Int_comparison_exp = null
}

input v2_tokens_args {
  p_denom: String
  p_universal_chain_id: String
  p_whitelist: Boolean
}

type v2_traces_type {
  type: String
  block_hash: String
  height: String
  event_index: String
  timestamp: DateTime
  transaction_hash: String
  universal_chain_id: String
  chain: v2_chain_type!
}

type v2_transfer_type {
  packet_hash: String
  success: Boolean
  packet_shape: String
  transfer_index: Int
  source_universal_chain_id: String
  destination_universal_chain_id: String
  sender_canonical: String
  sender_display: String
  sender_zkgm: String
  receiver_canonical: String
  receiver_display: String
  receiver_zkgm: String
  wrap_direction: String
  base_token: String
  base_amount: String
  base_token_name: String
  base_token_path: String
  base_token_symbol: String
  base_token_decimals: Int
  quote_token: String
  quote_amount: String
  fee_type: String
  fee_token: String
  fee_amount: String
  transfer_send_timestamp: DateTime
  transfer_send_transaction_hash: String
  transfer_recv_timestamp: DateTime
  transfer_recv_transaction_hash: String
  transfer_timeout_timestamp: DateTime
  transfer_timeout_transaction_hash: String
  sort_order: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
  traces: [v2_traces_type!]!
  base_token_meta: v2_token_meta
  fee_token_meta: v2_token_meta
  quote_token_meta: v2_token_meta
}

input v2_transfers_args {
  p_addresses_canonical: jsonb
  p_block_hash: String
  p_comparison: ComparisonOp! = lt
  p_destination_universal_chain_id: String
  p_limit: Int
  p_network: String
  p_packet_hash: String
  p_sort_order: String
  p_source_universal_chain_id: String
  p_transaction_hash: String
  p_transfer_index: Int
}

type v2_unbond_type {
  packet_hash: String
  success: Boolean
  packet_shape: String
  source_universal_chain_id: String
  destination_universal_chain_id: String
  sender_canonical: String
  sender_display: String
  sender_zkgm: String
  base_token: String
  base_amount: String
  batch: String
  unbond_send_timestamp: DateTime
  unbond_send_transaction_hash: String
  unbond_recv_timestamp: DateTime
  unbond_recv_transaction_hash: String
  unbond_timeout_timestamp: DateTime
  unbond_timeout_transaction_hash: String
  sort_order: String
  source_chain: v2_chain_type!
  destination_chain: v2_chain_type!
  traces: [v2_traces_type!]!
  base_token_meta: v2_token_meta
}

input v2_unbonds_args {
  p_addresses_canonical: jsonb
  p_block_hash: String
  p_comparison: ComparisonOp! = lt
  p_destination_universal_chain_id: String
  p_limit: Int
  p_network: String
  p_packet_hash: String
  p_sort_order: String
  p_source_universal_chain_id: String
  p_transaction_hash: String
}

input v2_util_get_address_types_for_display_address_args {
  p_display_address: String
  p_chain_type: String
}

type v2_util_get_address_types_for_display_address_type {
  canonical: String
  display: String
  zkgm: String
}

input v2_util_get_transfer_request_details_args {
  p_source_universal_chain_id: String
  p_destination_universal_chain_id: String
  p_base_token: String
}

type v2_util_get_transfer_request_details_type {
  quote_token: String
  source_channel_id: Int
  destination_channel_id: Int
  already_exists: Boolean
  wrap_direction: String
}