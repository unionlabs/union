schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "blocks"
"""
type blocks {
  """An object relationship"""
  chain: chains!
  chain_id: Int!
  created_at: timestamptz

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!
  extra_data(
    """JSON select path"""
    path: String
  ): jsonb
  hash: String!
  height: Int!
  id: Int!
  is_finalized: Boolean!
  updated_at: timestamptz
}

"""
aggregated selection of "blocks"
"""
type blocks_aggregate {
  aggregate: blocks_aggregate_fields
  nodes: [blocks!]!
}

input blocks_aggregate_bool_exp {
  bool_and: blocks_aggregate_bool_exp_bool_and
  bool_or: blocks_aggregate_bool_exp_bool_or
  count: blocks_aggregate_bool_exp_count
}

input blocks_aggregate_bool_exp_bool_and {
  arguments: blocks_select_column_blocks_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: blocks_bool_exp
  predicate: Boolean_comparison_exp!
}

input blocks_aggregate_bool_exp_bool_or {
  arguments: blocks_select_column_blocks_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: blocks_bool_exp
  predicate: Boolean_comparison_exp!
}

input blocks_aggregate_bool_exp_count {
  arguments: [blocks_select_column!]
  distinct: Boolean
  filter: blocks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "blocks"
"""
type blocks_aggregate_fields {
  avg: blocks_avg_fields
  count(columns: [blocks_select_column!], distinct: Boolean): Int!
  max: blocks_max_fields
  min: blocks_min_fields
  stddev: blocks_stddev_fields
  stddev_pop: blocks_stddev_pop_fields
  stddev_samp: blocks_stddev_samp_fields
  sum: blocks_sum_fields
  var_pop: blocks_var_pop_fields
  var_samp: blocks_var_samp_fields
  variance: blocks_variance_fields
}

"""
order by aggregate values of table "blocks"
"""
input blocks_aggregate_order_by {
  avg: blocks_avg_order_by
  count: order_by
  max: blocks_max_order_by
  min: blocks_min_order_by
  stddev: blocks_stddev_order_by
  stddev_pop: blocks_stddev_pop_order_by
  stddev_samp: blocks_stddev_samp_order_by
  sum: blocks_sum_order_by
  var_pop: blocks_var_pop_order_by
  var_samp: blocks_var_samp_order_by
  variance: blocks_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input blocks_append_input {
  extra_data: jsonb
}

"""
input type for inserting array relation for remote table "blocks"
"""
input blocks_arr_rel_insert_input {
  data: [blocks_insert_input!]!

  """upsert condition"""
  on_conflict: blocks_on_conflict
}

"""aggregate avg on columns"""
type blocks_avg_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by avg() on columns of table "blocks"
"""
input blocks_avg_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""
Boolean expression to filter rows from the table "blocks". All fields are combined with a logical 'AND'.
"""
input blocks_bool_exp {
  _and: [blocks_bool_exp!]
  _not: blocks_bool_exp
  _or: [blocks_bool_exp!]
  chain: chains_bool_exp
  chain_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  events: events_bool_exp
  events_aggregate: events_aggregate_bool_exp
  extra_data: jsonb_comparison_exp
  hash: String_comparison_exp
  height: Int_comparison_exp
  id: Int_comparison_exp
  is_finalized: Boolean_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "blocks"
"""
enum blocks_constraint {
  """
  unique or primary key constraint on columns "chain_id", "hash"
  """
  blocks_hash_chain_id_key

  """
  unique or primary key constraint on columns "id"
  """
  blocks_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input blocks_delete_at_path_input {
  extra_data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input blocks_delete_elem_input {
  extra_data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input blocks_delete_key_input {
  extra_data: String
}

"""
input type for incrementing numeric columns in table "blocks"
"""
input blocks_inc_input {
  chain_id: Int
  height: Int
  id: Int
}

"""
input type for inserting data into table "blocks"
"""
input blocks_insert_input {
  chain: chains_obj_rel_insert_input
  chain_id: Int
  created_at: timestamptz
  events: events_arr_rel_insert_input
  extra_data: jsonb
  hash: String
  height: Int
  id: Int
  is_finalized: Boolean
  updated_at: timestamptz
}

"""aggregate max on columns"""
type blocks_max_fields {
  chain_id: Int
  created_at: timestamptz
  hash: String
  height: Int
  id: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "blocks"
"""
input blocks_max_order_by {
  chain_id: order_by
  created_at: order_by
  hash: order_by
  height: order_by
  id: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type blocks_min_fields {
  chain_id: Int
  created_at: timestamptz
  hash: String
  height: Int
  id: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "blocks"
"""
input blocks_min_order_by {
  chain_id: order_by
  created_at: order_by
  hash: order_by
  height: order_by
  id: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "blocks"
"""
type blocks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [blocks!]!
}

"""
input type for inserting object relation for remote table "blocks"
"""
input blocks_obj_rel_insert_input {
  data: blocks_insert_input!

  """upsert condition"""
  on_conflict: blocks_on_conflict
}

"""
on_conflict condition type for table "blocks"
"""
input blocks_on_conflict {
  constraint: blocks_constraint!
  update_columns: [blocks_update_column!]! = []
  where: blocks_bool_exp
}

"""Ordering options when selecting data from "blocks"."""
input blocks_order_by {
  chain: chains_order_by
  chain_id: order_by
  created_at: order_by
  events_aggregate: events_aggregate_order_by
  extra_data: order_by
  hash: order_by
  height: order_by
  id: order_by
  is_finalized: order_by
  updated_at: order_by
}

"""primary key columns input for table: blocks"""
input blocks_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input blocks_prepend_input {
  extra_data: jsonb
}

"""
select columns of table "blocks"
"""
enum blocks_select_column {
  """column name"""
  chain_id

  """column name"""
  created_at

  """column name"""
  extra_data

  """column name"""
  hash

  """column name"""
  height

  """column name"""
  id

  """column name"""
  is_finalized

  """column name"""
  updated_at
}

"""
select "blocks_aggregate_bool_exp_bool_and_arguments_columns" columns of table "blocks"
"""
enum blocks_select_column_blocks_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_finalized
}

"""
select "blocks_aggregate_bool_exp_bool_or_arguments_columns" columns of table "blocks"
"""
enum blocks_select_column_blocks_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_finalized
}

"""
input type for updating data in table "blocks"
"""
input blocks_set_input {
  chain_id: Int
  created_at: timestamptz
  extra_data: jsonb
  hash: String
  height: Int
  id: Int
  is_finalized: Boolean
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type blocks_stddev_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by stddev() on columns of table "blocks"
"""
input blocks_stddev_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""aggregate stddev_pop on columns"""
type blocks_stddev_pop_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by stddev_pop() on columns of table "blocks"
"""
input blocks_stddev_pop_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""aggregate stddev_samp on columns"""
type blocks_stddev_samp_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by stddev_samp() on columns of table "blocks"
"""
input blocks_stddev_samp_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""
Streaming cursor of the table "blocks"
"""
input blocks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: blocks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input blocks_stream_cursor_value_input {
  chain_id: Int
  created_at: timestamptz
  extra_data: jsonb
  hash: String
  height: Int
  id: Int
  is_finalized: Boolean
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type blocks_sum_fields {
  chain_id: Int
  height: Int
  id: Int
}

"""
order by sum() on columns of table "blocks"
"""
input blocks_sum_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""
update columns of table "blocks"
"""
enum blocks_update_column {
  """column name"""
  chain_id

  """column name"""
  created_at

  """column name"""
  extra_data

  """column name"""
  hash

  """column name"""
  height

  """column name"""
  id

  """column name"""
  is_finalized

  """column name"""
  updated_at
}

input blocks_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: blocks_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: blocks_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: blocks_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: blocks_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: blocks_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: blocks_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: blocks_set_input

  """filter the rows which have to be updated"""
  where: blocks_bool_exp!
}

"""aggregate var_pop on columns"""
type blocks_var_pop_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by var_pop() on columns of table "blocks"
"""
input blocks_var_pop_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""aggregate var_samp on columns"""
type blocks_var_samp_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by var_samp() on columns of table "blocks"
"""
input blocks_var_samp_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""aggregate variance on columns"""
type blocks_variance_fields {
  chain_id: Float
  height: Float
  id: Float
}

"""
order by variance() on columns of table "blocks"
"""
input blocks_variance_order_by {
  chain_id: order_by
  height: order_by
  id: order_by
}

"""
columns and relationships of "chains"
"""
type chains {
  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): blocks_aggregate!
  chain_id: String!
  id: Int!
}

"""
aggregated selection of "chains"
"""
type chains_aggregate {
  aggregate: chains_aggregate_fields
  nodes: [chains!]!
}

"""
aggregate fields of "chains"
"""
type chains_aggregate_fields {
  avg: chains_avg_fields
  count(columns: [chains_select_column!], distinct: Boolean): Int!
  max: chains_max_fields
  min: chains_min_fields
  stddev: chains_stddev_fields
  stddev_pop: chains_stddev_pop_fields
  stddev_samp: chains_stddev_samp_fields
  sum: chains_sum_fields
  var_pop: chains_var_pop_fields
  var_samp: chains_var_samp_fields
  variance: chains_variance_fields
}

"""aggregate avg on columns"""
type chains_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "chains". All fields are combined with a logical 'AND'.
"""
input chains_bool_exp {
  _and: [chains_bool_exp!]
  _not: chains_bool_exp
  _or: [chains_bool_exp!]
  blocks: blocks_bool_exp
  blocks_aggregate: blocks_aggregate_bool_exp
  chain_id: String_comparison_exp
  id: Int_comparison_exp
}

"""
unique or primary key constraints on table "chains"
"""
enum chains_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  chains_id_key

  """
  unique or primary key constraint on columns "id", "chain_id"
  """
  chains_pkey
}

"""
input type for incrementing numeric columns in table "chains"
"""
input chains_inc_input {
  id: Int
}

"""
input type for inserting data into table "chains"
"""
input chains_insert_input {
  blocks: blocks_arr_rel_insert_input
  chain_id: String
  id: Int
}

"""aggregate max on columns"""
type chains_max_fields {
  chain_id: String
  id: Int
}

"""aggregate min on columns"""
type chains_min_fields {
  chain_id: String
  id: Int
}

"""
response of any mutation on the table "chains"
"""
type chains_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [chains!]!
}

"""
input type for inserting object relation for remote table "chains"
"""
input chains_obj_rel_insert_input {
  data: chains_insert_input!

  """upsert condition"""
  on_conflict: chains_on_conflict
}

"""
on_conflict condition type for table "chains"
"""
input chains_on_conflict {
  constraint: chains_constraint!
  update_columns: [chains_update_column!]! = []
  where: chains_bool_exp
}

"""Ordering options when selecting data from "chains"."""
input chains_order_by {
  blocks_aggregate: blocks_aggregate_order_by
  chain_id: order_by
  id: order_by
}

"""primary key columns input for table: chains"""
input chains_pk_columns_input {
  chain_id: String!
  id: Int!
}

"""
select columns of table "chains"
"""
enum chains_select_column {
  """column name"""
  chain_id

  """column name"""
  id
}

"""
input type for updating data in table "chains"
"""
input chains_set_input {
  chain_id: String
  id: Int
}

"""aggregate stddev on columns"""
type chains_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type chains_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type chains_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "chains"
"""
input chains_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: chains_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input chains_stream_cursor_value_input {
  chain_id: String
  id: Int
}

"""aggregate sum on columns"""
type chains_sum_fields {
  id: Int
}

"""
update columns of table "chains"
"""
enum chains_update_column {
  """column name"""
  chain_id

  """column name"""
  id
}

input chains_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: chains_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: chains_set_input

  """filter the rows which have to be updated"""
  where: chains_bool_exp!
}

"""aggregate var_pop on columns"""
type chains_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type chains_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type chains_variance_fields {
  id: Float
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "demo.txes"
"""
type demo_txes {
  created_at: timestamptz!
  data(
    """JSON select path"""
    path: String
  ): jsonb!
  id: Int!
  updated_at: timestamptz!
}

"""
aggregated selection of "demo.txes"
"""
type demo_txes_aggregate {
  aggregate: demo_txes_aggregate_fields
  nodes: [demo_txes!]!
}

"""
aggregate fields of "demo.txes"
"""
type demo_txes_aggregate_fields {
  avg: demo_txes_avg_fields
  count(columns: [demo_txes_select_column!], distinct: Boolean): Int!
  max: demo_txes_max_fields
  min: demo_txes_min_fields
  stddev: demo_txes_stddev_fields
  stddev_pop: demo_txes_stddev_pop_fields
  stddev_samp: demo_txes_stddev_samp_fields
  sum: demo_txes_sum_fields
  var_pop: demo_txes_var_pop_fields
  var_samp: demo_txes_var_samp_fields
  variance: demo_txes_variance_fields
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input demo_txes_append_input {
  data: jsonb
}

"""aggregate avg on columns"""
type demo_txes_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "demo.txes". All fields are combined with a logical 'AND'.
"""
input demo_txes_bool_exp {
  _and: [demo_txes_bool_exp!]
  _not: demo_txes_bool_exp
  _or: [demo_txes_bool_exp!]
  created_at: timestamptz_comparison_exp
  data: jsonb_comparison_exp
  id: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "demo.txes"
"""
enum demo_txes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  txes_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input demo_txes_delete_at_path_input {
  data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input demo_txes_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input demo_txes_delete_key_input {
  data: String
}

"""
input type for incrementing numeric columns in table "demo.txes"
"""
input demo_txes_inc_input {
  id: Int
}

"""
input type for inserting data into table "demo.txes"
"""
input demo_txes_insert_input {
  created_at: timestamptz
  data: jsonb
  id: Int
  updated_at: timestamptz
}

"""aggregate max on columns"""
type demo_txes_max_fields {
  created_at: timestamptz
  id: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type demo_txes_min_fields {
  created_at: timestamptz
  id: Int
  updated_at: timestamptz
}

"""
response of any mutation on the table "demo.txes"
"""
type demo_txes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [demo_txes!]!
}

"""
on_conflict condition type for table "demo.txes"
"""
input demo_txes_on_conflict {
  constraint: demo_txes_constraint!
  update_columns: [demo_txes_update_column!]! = []
  where: demo_txes_bool_exp
}

"""Ordering options when selecting data from "demo.txes"."""
input demo_txes_order_by {
  created_at: order_by
  data: order_by
  id: order_by
  updated_at: order_by
}

"""primary key columns input for table: demo.txes"""
input demo_txes_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input demo_txes_prepend_input {
  data: jsonb
}

"""
select columns of table "demo.txes"
"""
enum demo_txes_select_column {
  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  id

  """column name"""
  updated_at
}

"""
input type for updating data in table "demo.txes"
"""
input demo_txes_set_input {
  created_at: timestamptz
  data: jsonb
  id: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type demo_txes_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type demo_txes_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type demo_txes_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "demo_txes"
"""
input demo_txes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: demo_txes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input demo_txes_stream_cursor_value_input {
  created_at: timestamptz
  data: jsonb
  id: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type demo_txes_sum_fields {
  id: Int
}

"""
update columns of table "demo.txes"
"""
enum demo_txes_update_column {
  """column name"""
  created_at

  """column name"""
  data

  """column name"""
  id

  """column name"""
  updated_at
}

input demo_txes_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: demo_txes_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: demo_txes_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: demo_txes_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: demo_txes_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: demo_txes_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: demo_txes_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: demo_txes_set_input

  """filter the rows which have to be updated"""
  where: demo_txes_bool_exp!
}

"""aggregate var_pop on columns"""
type demo_txes_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type demo_txes_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type demo_txes_variance_fields {
  id: Float
}

"""
columns and relationships of "events"
"""
type events {
  """An object relationship"""
  block: blocks!
  block_id: Int!
  data(
    """JSON select path"""
    path: String
  ): jsonb!
  id: Int!
  index: Int!
}

"""
aggregated selection of "events"
"""
type events_aggregate {
  aggregate: events_aggregate_fields
  nodes: [events!]!
}

input events_aggregate_bool_exp {
  count: events_aggregate_bool_exp_count
}

input events_aggregate_bool_exp_count {
  arguments: [events_select_column!]
  distinct: Boolean
  filter: events_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "events"
"""
type events_aggregate_fields {
  avg: events_avg_fields
  count(columns: [events_select_column!], distinct: Boolean): Int!
  max: events_max_fields
  min: events_min_fields
  stddev: events_stddev_fields
  stddev_pop: events_stddev_pop_fields
  stddev_samp: events_stddev_samp_fields
  sum: events_sum_fields
  var_pop: events_var_pop_fields
  var_samp: events_var_samp_fields
  variance: events_variance_fields
}

"""
order by aggregate values of table "events"
"""
input events_aggregate_order_by {
  avg: events_avg_order_by
  count: order_by
  max: events_max_order_by
  min: events_min_order_by
  stddev: events_stddev_order_by
  stddev_pop: events_stddev_pop_order_by
  stddev_samp: events_stddev_samp_order_by
  sum: events_sum_order_by
  var_pop: events_var_pop_order_by
  var_samp: events_var_samp_order_by
  variance: events_variance_order_by
}

"""append existing jsonb value of filtered columns with new jsonb value"""
input events_append_input {
  data: jsonb
}

"""
input type for inserting array relation for remote table "events"
"""
input events_arr_rel_insert_input {
  data: [events_insert_input!]!

  """upsert condition"""
  on_conflict: events_on_conflict
}

"""aggregate avg on columns"""
type events_avg_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by avg() on columns of table "events"
"""
input events_avg_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""
Boolean expression to filter rows from the table "events". All fields are combined with a logical 'AND'.
"""
input events_bool_exp {
  _and: [events_bool_exp!]
  _not: events_bool_exp
  _or: [events_bool_exp!]
  block: blocks_bool_exp
  block_id: Int_comparison_exp
  data: jsonb_comparison_exp
  id: Int_comparison_exp
  index: Int_comparison_exp
}

"""
unique or primary key constraints on table "events"
"""
enum events_constraint {
  """
  unique or primary key constraint on columns "index", "block_id"
  """
  events_block_id_index_key

  """
  unique or primary key constraint on columns "id"
  """
  events_pkey
}

"""
delete the field or element with specified path (for JSON arrays, negative integers count from the end)
"""
input events_delete_at_path_input {
  data: [String!]
}

"""
delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
"""
input events_delete_elem_input {
  data: Int
}

"""
delete key/value pair or string element. key/value pairs are matched based on their key value
"""
input events_delete_key_input {
  data: String
}

"""
input type for incrementing numeric columns in table "events"
"""
input events_inc_input {
  block_id: Int
  id: Int
  index: Int
}

"""
input type for inserting data into table "events"
"""
input events_insert_input {
  block: blocks_obj_rel_insert_input
  block_id: Int
  data: jsonb
  id: Int
  index: Int
}

"""aggregate max on columns"""
type events_max_fields {
  block_id: Int
  id: Int
  index: Int
}

"""
order by max() on columns of table "events"
"""
input events_max_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""aggregate min on columns"""
type events_min_fields {
  block_id: Int
  id: Int
  index: Int
}

"""
order by min() on columns of table "events"
"""
input events_min_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""
response of any mutation on the table "events"
"""
type events_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [events!]!
}

"""
on_conflict condition type for table "events"
"""
input events_on_conflict {
  constraint: events_constraint!
  update_columns: [events_update_column!]! = []
  where: events_bool_exp
}

"""Ordering options when selecting data from "events"."""
input events_order_by {
  block: blocks_order_by
  block_id: order_by
  data: order_by
  id: order_by
  index: order_by
}

"""primary key columns input for table: events"""
input events_pk_columns_input {
  id: Int!
}

"""prepend existing jsonb value of filtered columns with new jsonb value"""
input events_prepend_input {
  data: jsonb
}

"""
select columns of table "events"
"""
enum events_select_column {
  """column name"""
  block_id

  """column name"""
  data

  """column name"""
  id

  """column name"""
  index
}

"""
input type for updating data in table "events"
"""
input events_set_input {
  block_id: Int
  data: jsonb
  id: Int
  index: Int
}

"""aggregate stddev on columns"""
type events_stddev_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by stddev() on columns of table "events"
"""
input events_stddev_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""aggregate stddev_pop on columns"""
type events_stddev_pop_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by stddev_pop() on columns of table "events"
"""
input events_stddev_pop_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""aggregate stddev_samp on columns"""
type events_stddev_samp_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by stddev_samp() on columns of table "events"
"""
input events_stddev_samp_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""
Streaming cursor of the table "events"
"""
input events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: events_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input events_stream_cursor_value_input {
  block_id: Int
  data: jsonb
  id: Int
  index: Int
}

"""aggregate sum on columns"""
type events_sum_fields {
  block_id: Int
  id: Int
  index: Int
}

"""
order by sum() on columns of table "events"
"""
input events_sum_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""
update columns of table "events"
"""
enum events_update_column {
  """column name"""
  block_id

  """column name"""
  data

  """column name"""
  id

  """column name"""
  index
}

input events_updates {
  """append existing jsonb value of filtered columns with new jsonb value"""
  _append: events_append_input

  """
  delete the field or element with specified path (for JSON arrays, negative integers count from the end)
  """
  _delete_at_path: events_delete_at_path_input

  """
  delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
  """
  _delete_elem: events_delete_elem_input

  """
  delete key/value pair or string element. key/value pairs are matched based on their key value
  """
  _delete_key: events_delete_key_input

  """increments the numeric columns with given value of the filtered values"""
  _inc: events_inc_input

  """prepend existing jsonb value of filtered columns with new jsonb value"""
  _prepend: events_prepend_input

  """sets the columns of the filtered rows to the given values"""
  _set: events_set_input

  """filter the rows which have to be updated"""
  where: events_bool_exp!
}

"""aggregate var_pop on columns"""
type events_var_pop_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by var_pop() on columns of table "events"
"""
input events_var_pop_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""aggregate var_samp on columns"""
type events_var_samp_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by var_samp() on columns of table "events"
"""
input events_var_samp_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

"""aggregate variance on columns"""
type events_variance_fields {
  block_id: Float
  id: Float
  index: Float
}

"""
order by variance() on columns of table "events"
"""
input events_variance_order_by {
  block_id: order_by
  id: order_by
  index: order_by
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp

  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "blocks"
  """
  delete_blocks(
    """filter the rows which have to be deleted"""
    where: blocks_bool_exp!
  ): blocks_mutation_response

  """
  delete single row from the table: "blocks"
  """
  delete_blocks_by_pk(id: Int!): blocks

  """
  delete data from the table: "chains"
  """
  delete_chains(
    """filter the rows which have to be deleted"""
    where: chains_bool_exp!
  ): chains_mutation_response

  """
  delete single row from the table: "chains"
  """
  delete_chains_by_pk(chain_id: String!, id: Int!): chains

  """
  delete data from the table: "demo.txes"
  """
  delete_demo_txes(
    """filter the rows which have to be deleted"""
    where: demo_txes_bool_exp!
  ): demo_txes_mutation_response

  """
  delete single row from the table: "demo.txes"
  """
  delete_demo_txes_by_pk(id: Int!): demo_txes

  """
  delete data from the table: "events"
  """
  delete_events(
    """filter the rows which have to be deleted"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  delete single row from the table: "events"
  """
  delete_events_by_pk(id: Int!): events

  """
  insert data into the table: "blocks"
  """
  insert_blocks(
    """the rows to be inserted"""
    objects: [blocks_insert_input!]!

    """upsert condition"""
    on_conflict: blocks_on_conflict
  ): blocks_mutation_response

  """
  insert a single row into the table: "blocks"
  """
  insert_blocks_one(
    """the row to be inserted"""
    object: blocks_insert_input!

    """upsert condition"""
    on_conflict: blocks_on_conflict
  ): blocks

  """
  insert data into the table: "chains"
  """
  insert_chains(
    """the rows to be inserted"""
    objects: [chains_insert_input!]!

    """upsert condition"""
    on_conflict: chains_on_conflict
  ): chains_mutation_response

  """
  insert a single row into the table: "chains"
  """
  insert_chains_one(
    """the row to be inserted"""
    object: chains_insert_input!

    """upsert condition"""
    on_conflict: chains_on_conflict
  ): chains

  """
  insert data into the table: "demo.txes"
  """
  insert_demo_txes(
    """the rows to be inserted"""
    objects: [demo_txes_insert_input!]!

    """upsert condition"""
    on_conflict: demo_txes_on_conflict
  ): demo_txes_mutation_response

  """
  insert a single row into the table: "demo.txes"
  """
  insert_demo_txes_one(
    """the row to be inserted"""
    object: demo_txes_insert_input!

    """upsert condition"""
    on_conflict: demo_txes_on_conflict
  ): demo_txes

  """
  insert data into the table: "events"
  """
  insert_events(
    """the rows to be inserted"""
    objects: [events_insert_input!]!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events_mutation_response

  """
  insert a single row into the table: "events"
  """
  insert_events_one(
    """the row to be inserted"""
    object: events_insert_input!

    """upsert condition"""
    on_conflict: events_on_conflict
  ): events

  """
  update data of the table: "blocks"
  """
  update_blocks(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blocks_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blocks_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blocks_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blocks_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: blocks_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blocks_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blocks_set_input

    """filter the rows which have to be updated"""
    where: blocks_bool_exp!
  ): blocks_mutation_response

  """
  update single row of the table: "blocks"
  """
  update_blocks_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: blocks_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: blocks_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: blocks_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: blocks_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: blocks_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: blocks_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: blocks_set_input
    pk_columns: blocks_pk_columns_input!
  ): blocks

  """
  update multiples rows of table: "blocks"
  """
  update_blocks_many(
    """updates to execute, in order"""
    updates: [blocks_updates!]!
  ): [blocks_mutation_response]

  """
  update data of the table: "chains"
  """
  update_chains(
    """increments the numeric columns with given value of the filtered values"""
    _inc: chains_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: chains_set_input

    """filter the rows which have to be updated"""
    where: chains_bool_exp!
  ): chains_mutation_response

  """
  update single row of the table: "chains"
  """
  update_chains_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: chains_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: chains_set_input
    pk_columns: chains_pk_columns_input!
  ): chains

  """
  update multiples rows of table: "chains"
  """
  update_chains_many(
    """updates to execute, in order"""
    updates: [chains_updates!]!
  ): [chains_mutation_response]

  """
  update data of the table: "demo.txes"
  """
  update_demo_txes(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: demo_txes_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: demo_txes_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: demo_txes_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: demo_txes_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: demo_txes_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: demo_txes_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: demo_txes_set_input

    """filter the rows which have to be updated"""
    where: demo_txes_bool_exp!
  ): demo_txes_mutation_response

  """
  update single row of the table: "demo.txes"
  """
  update_demo_txes_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: demo_txes_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: demo_txes_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: demo_txes_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: demo_txes_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: demo_txes_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: demo_txes_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: demo_txes_set_input
    pk_columns: demo_txes_pk_columns_input!
  ): demo_txes

  """
  update multiples rows of table: "demo.txes"
  """
  update_demo_txes_many(
    """updates to execute, in order"""
    updates: [demo_txes_updates!]!
  ): [demo_txes_mutation_response]

  """
  update data of the table: "events"
  """
  update_events(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input

    """filter the rows which have to be updated"""
    where: events_bool_exp!
  ): events_mutation_response

  """
  update single row of the table: "events"
  """
  update_events_by_pk(
    """append existing jsonb value of filtered columns with new jsonb value"""
    _append: events_append_input

    """
    delete the field or element with specified path (for JSON arrays, negative integers count from the end)
    """
    _delete_at_path: events_delete_at_path_input

    """
    delete the array element with specified index (negative integers count from the end). throws an error if top level container is not an array
    """
    _delete_elem: events_delete_elem_input

    """
    delete key/value pair or string element. key/value pairs are matched based on their key value
    """
    _delete_key: events_delete_key_input

    """increments the numeric columns with given value of the filtered values"""
    _inc: events_inc_input

    """prepend existing jsonb value of filtered columns with new jsonb value"""
    _prepend: events_prepend_input

    """sets the columns of the filtered rows to the given values"""
    _set: events_set_input
    pk_columns: events_pk_columns_input!
  ): events

  """
  update multiples rows of table: "events"
  """
  update_events_many(
    """updates to execute, in order"""
    updates: [events_updates!]!
  ): [events_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): blocks_aggregate!

  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(id: Int!): blocks

  """
  fetch data from the table: "chains"
  """
  chains(
    """distinct select on columns"""
    distinct_on: [chains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chains_order_by!]

    """filter the rows returned"""
    where: chains_bool_exp
  ): [chains!]!

  """
  fetch aggregated fields from the table: "chains"
  """
  chains_aggregate(
    """distinct select on columns"""
    distinct_on: [chains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chains_order_by!]

    """filter the rows returned"""
    where: chains_bool_exp
  ): chains_aggregate!

  """fetch data from the table: "chains" using primary key columns"""
  chains_by_pk(chain_id: String!, id: Int!): chains

  """
  fetch data from the table: "demo.txes"
  """
  demo_txes(
    """distinct select on columns"""
    distinct_on: [demo_txes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [demo_txes_order_by!]

    """filter the rows returned"""
    where: demo_txes_bool_exp
  ): [demo_txes!]!

  """
  fetch aggregated fields from the table: "demo.txes"
  """
  demo_txes_aggregate(
    """distinct select on columns"""
    distinct_on: [demo_txes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [demo_txes_order_by!]

    """filter the rows returned"""
    where: demo_txes_bool_exp
  ): demo_txes_aggregate!

  """fetch data from the table: "demo.txes" using primary key columns"""
  demo_txes_by_pk(id: Int!): demo_txes

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events
}

type subscription_root {
  """An array relationship"""
  blocks(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """An aggregate relationship"""
  blocks_aggregate(
    """distinct select on columns"""
    distinct_on: [blocks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [blocks_order_by!]

    """filter the rows returned"""
    where: blocks_bool_exp
  ): blocks_aggregate!

  """fetch data from the table: "blocks" using primary key columns"""
  blocks_by_pk(id: Int!): blocks

  """
  fetch data from the table in a streaming manner: "blocks"
  """
  blocks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [blocks_stream_cursor_input]!

    """filter the rows returned"""
    where: blocks_bool_exp
  ): [blocks!]!

  """
  fetch data from the table: "chains"
  """
  chains(
    """distinct select on columns"""
    distinct_on: [chains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chains_order_by!]

    """filter the rows returned"""
    where: chains_bool_exp
  ): [chains!]!

  """
  fetch aggregated fields from the table: "chains"
  """
  chains_aggregate(
    """distinct select on columns"""
    distinct_on: [chains_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chains_order_by!]

    """filter the rows returned"""
    where: chains_bool_exp
  ): chains_aggregate!

  """fetch data from the table: "chains" using primary key columns"""
  chains_by_pk(chain_id: String!, id: Int!): chains

  """
  fetch data from the table in a streaming manner: "chains"
  """
  chains_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [chains_stream_cursor_input]!

    """filter the rows returned"""
    where: chains_bool_exp
  ): [chains!]!

  """
  fetch data from the table: "demo.txes"
  """
  demo_txes(
    """distinct select on columns"""
    distinct_on: [demo_txes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [demo_txes_order_by!]

    """filter the rows returned"""
    where: demo_txes_bool_exp
  ): [demo_txes!]!

  """
  fetch aggregated fields from the table: "demo.txes"
  """
  demo_txes_aggregate(
    """distinct select on columns"""
    distinct_on: [demo_txes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [demo_txes_order_by!]

    """filter the rows returned"""
    where: demo_txes_bool_exp
  ): demo_txes_aggregate!

  """fetch data from the table: "demo.txes" using primary key columns"""
  demo_txes_by_pk(id: Int!): demo_txes

  """
  fetch data from the table in a streaming manner: "demo.txes"
  """
  demo_txes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [demo_txes_stream_cursor_input]!

    """filter the rows returned"""
    where: demo_txes_bool_exp
  ): [demo_txes!]!

  """An array relationship"""
  events(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!

  """An aggregate relationship"""
  events_aggregate(
    """distinct select on columns"""
    distinct_on: [events_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [events_order_by!]

    """filter the rows returned"""
    where: events_bool_exp
  ): events_aggregate!

  """fetch data from the table: "events" using primary key columns"""
  events_by_pk(id: Int!): events

  """
  fetch data from the table in a streaming manner: "events"
  """
  events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [events_stream_cursor_input]!

    """filter the rows returned"""
    where: events_bool_exp
  ): [events!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

