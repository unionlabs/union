#![warn(clippy::pedantic)]

use alloy::{
    consensus::{constants::GWEI_TO_WEI, SignableTransaction, Signed, TxEnvelope, TxLegacy},
    eips::eip2718::Encodable2718,
    hex,
    primitives::{Bytes, PrimitiveSignature, TxKind, U256},
};
use clap::Parser;

const DEPLOYER_BYTECODE: &[u8] = &hex!("0x608080604052346015576102d4908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c63d83c113814610024575f80fd5b346102055760603660031901126102055760043567ffffffffffffffff8111610205573660238201121561020557610066903690602481600401359101610258565b6024359067ffffffffffffffff821161020557366023830112156102055781600401359167ffffffffffffffff831161020557366024848301011161020557604051608081016040526f30313233343536373839616263646566600f526002810192602884525f604a8301523360601b60015f5b8080018501602284831a600f811651602384015360041c5191015301906014821461010857906001906100da565b505061017d600161018b9560226020825195613078600288019452838852604051968794838087019a018a5e8401907f2f0000000000000000000000000000000000000000000000000000000000000084830152805192839101602383015e01015f838201520301601f198101835282610209565b519020926024369201610258565b906f67363d3d37363d34f03d5260086018f35f526010805ff59081156101f8575f80918360145261d694825260016034536017601e209360208251920190604435905af1813b02156101f85760209073ffffffffffffffffffffffffffffffffffffffff60405191168152f35b63301164255f526004601cfd5b5f80fd5b90601f8019910116810190811067ffffffffffffffff82111761022b57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b92919267ffffffffffffffff821161022b5760405191610282601f8201601f191660200184610209565b829481845281830111610205578281602093845f96013701015256fea264697066735822122033d99c7c2a972ec5b96de29f5b4d23e6db548a0751b6849b2d3d9d6efd3d03ed64736f6c634300081b0033");

const TX: TxLegacy = TxLegacy {
    chain_id: None,
    nonce: 0,
    gas_price: (100 * GWEI_TO_WEI) as u128,
    gas_limit: 300_000,
    to: TxKind::Create,
    value: U256::ZERO,
    input: Bytes::from_static(DEPLOYER_BYTECODE),
};

#[derive(Parser)]
enum Args {
    /// Generate the signature hash of the transaction, to pass to `cast wallet sign`.
    SignatureHash,
    /// Generate raw transaction, given the signature from `cast wallet sign`.
    RawTx { signature_hash: PrimitiveSignature },
}

fn main() {
    match Args::parse() {
        Args::SignatureHash => {
            println!("{}", TX.signature_hash());
        }
        Args::RawTx { signature_hash } => {
            println!(
                "{}",
                Bytes::from(
                    TxEnvelope::Legacy(Signed::<TxLegacy>::new_unhashed(TX, signature_hash))
                        .encoded_2718()
                )
            );
        }
    }
}
